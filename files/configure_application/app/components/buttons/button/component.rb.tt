# frozen_string_literal: true

module Buttons
  module Button
    class Component < ViewComponent::Base
      include Utilities::FontAwesomeHelper
      include Utilities::ModelHelper
      include Utilities::PathsHelper
      include Utilities::ResourceHelper
      include Utilities::ControllerHelper
      include Buttons::Button::Actions::Crud
      include Buttons::Button::Actions::Dropdown
      include Buttons::Button::Actions::Role

      def initialize(button:, dropdown_item: false, title: nil)
        @button = button
        @dropdown_item = dropdown_item
        @title = title
      end

      def create_button
        @button = evaluate_button

        construct_button
      end

      private

      attr_reader :button, :dropdown_item, :title

      def evaluate_button
        evaluated_button = button_hash
        evaluated_button.merge! icon_fixed_width: true if dropdown_item?

        evaluated_button
      end

      def button_hash
        return button if button.is_a? Hash || divider?

        send button
      end

      def dropdown_item?
        dropdown_item.present?
      end

      def divider?
        button == :divider
      end

      def construct_button
        link_to(
          title_with_icon,
          button[:path],
          method: button[:method],
          class: button_class,
          role: 'button',
          id: button[:id],
          'aria-expanded': button[:aria_expanded],
          data: button[:data]
        )
      end

      def title_with_icon
        fa_icon(
          button[:icon],
          text: button[:title],
          fixed_width: button[:icon_fixed_width]
        )
      end

      def button_class
        "#{construct_button_class}#{construct_dropdown_class}"
      end

      def construct_button_class
        return nil if dropdown_item?
        return button[:class] if button.key? :class
        return "btn btn-#{bootstrap_class}" if bootstrap_class.present?

        'btn btn-primary'
      end

      def construct_dropdown_class
        "#{dropdown_class}#{dropdown_color_class}"
      end

      def dropdown_class
        return nil unless dropdown_item?

        'dropdown-item'
      end

      def dropdown_color_class
        return nil unless dropdown_item?
        return " text-#{bootstrap_class}" if bootstrap_class.present?

        nil
      end

      def bootstrap_class
        {
          new: 'success',
          edit: 'primary',
          destroy: 'danger',
          make_admin: 'secondary',
          make_member: 'warning'
        }[button[:action]]
      end
    end
  end
end
